// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts Post[]   // array of posts
  comments Comment[]
  likes Like[]

  // followers Follows[]
  // following Follows[]

  followers Follows[] @relation("UserFollowers") // incoming follows
  following Follows[] @relation("UserFollowing") // outgoing follows

  notifications Notification[] @relation("userNotification") // notifs recieved by a user
  notificationsCreated Notification[] @relation("notificationCreator") // notifs triggered by a user
}

model Post {
  id String @id @default(uuid())
  authorId String
  content String?
  image String?
   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(uuid())
  authorId String
  postId String
  content String
  createdAt DateTime @default(now())
  

  
  //relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  notifications Notification[]
  @@index([authorId,postId]) // composite index for faster queries
}


model Like {
  id String @id @default(uuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  
  //relations
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // to prevent liking a post twice
}

model Follows {
  
  followerId String
  followingId String
  createdAt DateTime @default(now())
  
  //relations
  follower User @relation("UserFollowers",fields: [followerId],references: [id],onDelete: Cascade)
  following User @relation("UserFollowing",fields: [followingId],references: [id],onDelete: Cascade)
  

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId,followingId]) // primary key to prevent duplicate follows
}

model Notification {
  id String @id @default(uuid())
  userId String 
  creatorId String 
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  
  createdAt DateTime @default(now())
  
  // Relations
  
  user User @relation("userNotification",fields: [userId],references: [id],onDelete: Cascade)
  creator User @relation("notificationCreator",fields: [creatorId],references: [id],onDelete: Cascade)
  
  post Post? @relation(fields: [postId],references: [id],onDelete: Cascade)
  comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade)
  
  @@index([userId,creatorId])
}

enum NotificationType{
  LIKE
  COMMENT
  FOLLOW
}